{
  "version": 3,
  "sources": ["../../src/js/node_modules/stackframe/stackframe.js", "../../src/js/node_modules/error-stack-parser/error-stack-parser.js", "../../src/js/compat.ts", "../../src/js/environments.ts", "../../src/js/nativefs.ts", "../../src/js/emscripten-settings.ts", "../../src/js/version.ts", "../../src/js/pyodide.ts"],
  "sourcesContent": ["(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('stackframe', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.StackFrame = factory();\n    }\n}(this, function() {\n    'use strict';\n    function _isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function _capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.substring(1);\n    }\n\n    function _getter(p) {\n        return function() {\n            return this[p];\n        };\n    }\n\n    var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];\n    var numericProps = ['columnNumber', 'lineNumber'];\n    var stringProps = ['fileName', 'functionName', 'source'];\n    var arrayProps = ['args'];\n    var objectProps = ['evalOrigin'];\n\n    var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);\n\n    function StackFrame(obj) {\n        if (!obj) return;\n        for (var i = 0; i < props.length; i++) {\n            if (obj[props[i]] !== undefined) {\n                this['set' + _capitalize(props[i])](obj[props[i]]);\n            }\n        }\n    }\n\n    StackFrame.prototype = {\n        getArgs: function() {\n            return this.args;\n        },\n        setArgs: function(v) {\n            if (Object.prototype.toString.call(v) !== '[object Array]') {\n                throw new TypeError('Args must be an Array');\n            }\n            this.args = v;\n        },\n\n        getEvalOrigin: function() {\n            return this.evalOrigin;\n        },\n        setEvalOrigin: function(v) {\n            if (v instanceof StackFrame) {\n                this.evalOrigin = v;\n            } else if (v instanceof Object) {\n                this.evalOrigin = new StackFrame(v);\n            } else {\n                throw new TypeError('Eval Origin must be an Object or StackFrame');\n            }\n        },\n\n        toString: function() {\n            var fileName = this.getFileName() || '';\n            var lineNumber = this.getLineNumber() || '';\n            var columnNumber = this.getColumnNumber() || '';\n            var functionName = this.getFunctionName() || '';\n            if (this.getIsEval()) {\n                if (fileName) {\n                    return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n                }\n                return '[eval]:' + lineNumber + ':' + columnNumber;\n            }\n            if (functionName) {\n                return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';\n            }\n            return fileName + ':' + lineNumber + ':' + columnNumber;\n        }\n    };\n\n    StackFrame.fromString = function StackFrame$$fromString(str) {\n        var argsStartIndex = str.indexOf('(');\n        var argsEndIndex = str.lastIndexOf(')');\n\n        var functionName = str.substring(0, argsStartIndex);\n        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');\n        var locationString = str.substring(argsEndIndex + 1);\n\n        if (locationString.indexOf('@') === 0) {\n            var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, '');\n            var fileName = parts[1];\n            var lineNumber = parts[2];\n            var columnNumber = parts[3];\n        }\n\n        return new StackFrame({\n            functionName: functionName,\n            args: args || undefined,\n            fileName: fileName,\n            lineNumber: lineNumber || undefined,\n            columnNumber: columnNumber || undefined\n        });\n    };\n\n    for (var i = 0; i < booleanProps.length; i++) {\n        StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n        StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function(p) {\n            return function(v) {\n                this[p] = Boolean(v);\n            };\n        })(booleanProps[i]);\n    }\n\n    for (var j = 0; j < numericProps.length; j++) {\n        StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n        StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function(p) {\n            return function(v) {\n                if (!_isNumber(v)) {\n                    throw new TypeError(p + ' must be a Number');\n                }\n                this[p] = Number(v);\n            };\n        })(numericProps[j]);\n    }\n\n    for (var k = 0; k < stringProps.length; k++) {\n        StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n        StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function(p) {\n            return function(v) {\n                this[p] = String(v);\n            };\n        })(stringProps[k]);\n    }\n\n    return StackFrame;\n}));\n", "(function(root, factory) {\n    'use strict';\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('error-stack-parser', ['stackframe'], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('stackframe'));\n    } else {\n        root.ErrorStackParser = factory(root.StackFrame);\n    }\n}(this, function ErrorStackParser(StackFrame) {\n    'use strict';\n\n    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\n    var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\n    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\n\n    return {\n        /**\n         * Given an Error object, extract the most information from it.\n         *\n         * @param {Error} error object\n         * @return {Array} of StackFrames\n         */\n        parse: function ErrorStackParser$$parse(error) {\n            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                return this.parseOpera(error);\n            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                return this.parseV8OrIE(error);\n            } else if (error.stack) {\n                return this.parseFFOrSafari(error);\n            } else {\n                throw new Error('Cannot parse given Error object');\n            }\n        },\n\n        // Separate line and column numbers from a string of the form: (URI:Line:Column)\n        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n            // Fail-fast but return locations like \"(native)\"\n            if (urlLike.indexOf(':') === -1) {\n                return [urlLike];\n            }\n\n            var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n            var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n            return [parts[1], parts[2] || undefined, parts[3] || undefined];\n        },\n\n        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(CHROME_IE_STACK_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                if (line.indexOf('(eval ') > -1) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(,.*$)/g, '');\n                }\n                var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').replace(/^.*?\\s+/, '');\n\n                // capture and preseve the parenthesized location \"(/foo/my bar.js:12:87)\" in\n                // case it has spaces in it, as the string is split on \\s+ later on\n                var location = sanitizedLine.match(/ (\\(.+\\)$)/);\n\n                // remove the parenthesized location from the line, if it was matched\n                sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n\n                // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine\n                // because this line doesn't have function name\n                var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);\n                var functionName = location && sanitizedLine || undefined;\n                var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                return new StackFrame({\n                    functionName: functionName,\n                    fileName: fileName,\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        },\n\n        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n            }, this);\n\n            return filtered.map(function(line) {\n                // Throw away eval information until we implement stacktrace.js/stackframe#8\n                if (line.indexOf(' > eval') > -1) {\n                    line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n                }\n\n                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                    // Safari eval frames only have function names and nothing else\n                    return new StackFrame({\n                        functionName: line\n                    });\n                } else {\n                    var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                    var matches = line.match(functionNameRegex);\n                    var functionName = matches && matches[1] ? matches[1] : undefined;\n                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n\n                    return new StackFrame({\n                        functionName: functionName,\n                        fileName: locationParts[0],\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }\n            }, this);\n        },\n\n        parseOpera: function ErrorStackParser$$parseOpera(e) {\n            if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                return this.parseOpera9(e);\n            } else if (!e.stack) {\n                return this.parseOpera10(e);\n            } else {\n                return this.parseOpera11(e);\n            }\n        },\n\n        parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n            var lines = e.message.split('\\n');\n            var result = [];\n\n            for (var i = 2, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(new StackFrame({\n                        fileName: match[2],\n                        lineNumber: match[1],\n                        source: lines[i]\n                    }));\n                }\n            }\n\n            return result;\n        },\n\n        parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n            var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n            var lines = e.stacktrace.split('\\n');\n            var result = [];\n\n            for (var i = 0, len = lines.length; i < len; i += 2) {\n                var match = lineRE.exec(lines[i]);\n                if (match) {\n                    result.push(\n                        new StackFrame({\n                            functionName: match[3] || undefined,\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        })\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        // Opera 10.65+ Error.stack very similar to FF/Safari\n        parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n            var filtered = error.stack.split('\\n').filter(function(line) {\n                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n            }, this);\n\n            return filtered.map(function(line) {\n                var tokens = line.split('@');\n                var locationParts = this.extractLocation(tokens.pop());\n                var functionCall = (tokens.shift() || '');\n                var functionName = functionCall\n                    .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                    .replace(/\\([^)]*\\)/g, '') || undefined;\n                var argsRaw;\n                if (functionCall.match(/\\(([^)]*)\\)/)) {\n                    argsRaw = functionCall.replace(/^[^(]+\\(([^)]*)\\)$/, '$1');\n                }\n                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                    undefined : argsRaw.split(',');\n\n                return new StackFrame({\n                    functionName: functionName,\n                    args: args,\n                    fileName: locationParts[0],\n                    lineNumber: locationParts[1],\n                    columnNumber: locationParts[2],\n                    source: line\n                });\n            }, this);\n        }\n    };\n}));\n", "import ErrorStackParser from \"error-stack-parser\";\nimport {\n  IN_NODE,\n  IN_NODE_ESM,\n  IN_BROWSER_MAIN_THREAD,\n  IN_BROWSER_WEB_WORKER,\n  IN_NODE_COMMONJS,\n} from \"./environments\";\nimport { Lockfile } from \"./types\";\n\nlet nodeUrlMod: typeof import(\"node:url\");\nlet nodePath: typeof import(\"node:path\");\nlet nodeVmMod: typeof import(\"node:vm\");\n/** @private */\nexport let nodeFSMod: typeof import(\"node:fs\");\n/** @private */\nexport let nodeFsPromisesMod: typeof import(\"node:fs/promises\");\n\ndeclare var globalThis: {\n  importScripts: (url: string) => void;\n  document?: typeof document;\n  fetch?: typeof fetch;\n};\n\n/**\n * If we're in node, it's most convenient to import various node modules on\n * initialization. Otherwise, this does nothing.\n * @private\n */\nexport async function initNodeModules() {\n  if (!IN_NODE) {\n    return;\n  }\n  // @ts-ignore\n  nodeUrlMod = (await import(\"node:url\")).default;\n  nodeFSMod = await import(\"node:fs\");\n  nodeFsPromisesMod = await import(\"node:fs/promises\");\n\n  // @ts-ignore\n  nodeVmMod = (await import(\"node:vm\")).default;\n  nodePath = await import(\"node:path\");\n  pathSep = nodePath.sep;\n\n  // Emscripten uses `require`, so if it's missing (because we were imported as\n  // an ES6 module) we need to polyfill `require` with `import`. `import` is\n  // async and `require` is synchronous, so we import all packages that might be\n  // required up front and define require to look them up in this table.\n\n  if (typeof require !== \"undefined\") {\n    return;\n  }\n  // These are all the packages required in pyodide.asm.js. You can get this\n  // list with:\n  // $ grep -o 'require(\"[a-z]*\")' pyodide.asm.js  | sort -u\n  const fs = nodeFSMod;\n  const crypto = await import(\"node:crypto\");\n  const ws = await import(\"ws\");\n  const child_process = await import(\"node:child_process\");\n  const node_modules: { [mode: string]: any } = {\n    fs,\n    crypto,\n    ws,\n    child_process,\n  };\n  // Since we're in an ES6 module, this is only modifying the module namespace,\n  // it's still private to Pyodide.\n  (globalThis as any).require = function (mod: string): any {\n    return node_modules[mod];\n  };\n}\n\nfunction node_resolvePath(path: string, base?: string): string {\n  return nodePath.resolve(base || \".\", path);\n}\n\nfunction browser_resolvePath(path: string, base?: string): string {\n  if (base === undefined) {\n    // @ts-ignore\n    base = location;\n  }\n  return new URL(path, base).toString();\n}\n\nexport let resolvePath: (rest: string, base?: string) => string;\nif (IN_NODE) {\n  resolvePath = node_resolvePath;\n} else {\n  resolvePath = browser_resolvePath;\n}\n\n/**\n * Get the path separator. If we are on Linux or in the browser, it's /.\n * In Windows, it's \\.\n * @private\n */\nexport let pathSep: string;\n\nif (!IN_NODE) {\n  pathSep = \"/\";\n}\n\n/**\n * Load a binary file, only for use in Node. If the path explicitly is a URL,\n * then fetch from a URL, else load from the file system.\n * @param indexURL base path to resolve relative paths\n * @param path the path to load\n * @param checksum sha-256 checksum of the package\n * @returns An ArrayBuffer containing the binary data\n * @private\n */\nfunction node_getBinaryResponse(\n  path: string,\n  _file_sub_resource_hash?: string | undefined, // Ignoring sub resource hash. See issue-2431.\n):\n  | { response: Promise<Response>; binary?: undefined }\n  | { binary: Promise<Uint8Array> } {\n  if (path.startsWith(\"file://\")) {\n    // handle file:// with filesystem operations rather than with fetch.\n    path = path.slice(\"file://\".length);\n  }\n  if (path.includes(\"://\")) {\n    // If it has a protocol, make a fetch request\n    return { response: fetch(path) };\n  } else {\n    // Otherwise get it from the file system\n    return {\n      binary: nodeFsPromisesMod\n        .readFile(path)\n        .then(\n          (data: Buffer) =>\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength),\n        ),\n    };\n  }\n}\n\n/**\n * Load a binary file, only for use in browser. Resolves relative paths against\n * indexURL.\n *\n * @param path the path to load\n * @param subResourceHash the sub resource hash for fetch() integrity check\n * @returns A Uint8Array containing the binary data\n * @private\n */\nfunction browser_getBinaryResponse(\n  path: string,\n  subResourceHash: string | undefined,\n): { response: Promise<Response>; binary?: undefined } {\n  const url = new URL(path, location as unknown as URL);\n  let options = subResourceHash ? { integrity: subResourceHash } : {};\n  return { response: fetch(url, options) };\n}\n\n/** @private */\nexport let getBinaryResponse: (\n  path: string,\n  file_sub_resource_hash?: string | undefined,\n) =>\n  | { response: Promise<Response>; binary?: undefined }\n  | { response?: undefined; binary: Promise<Uint8Array> };\nif (IN_NODE) {\n  getBinaryResponse = node_getBinaryResponse;\n} else {\n  getBinaryResponse = browser_getBinaryResponse;\n}\n\nexport async function loadBinaryFile(\n  path: string,\n  file_sub_resource_hash?: string | undefined,\n): Promise<Uint8Array> {\n  const { response, binary } = getBinaryResponse(path, file_sub_resource_hash);\n  if (binary) {\n    return binary;\n  }\n  const r = await response;\n  if (!r.ok) {\n    throw new Error(`Failed to load '${path}': request failed.`);\n  }\n  return new Uint8Array(await r.arrayBuffer());\n}\n\n/**\n * Currently loadScript is only used once to load `pyodide.asm.js`.\n * @param url\n * @async\n * @private\n */\nexport let loadScript: (url: string) => Promise<void>;\n\nif (IN_BROWSER_MAIN_THREAD) {\n  // browser\n  loadScript = async (url) => await import(/* webpackIgnore: true */ url);\n} else if (IN_BROWSER_WEB_WORKER) {\n  // webworker\n  loadScript = async (url) => {\n    try {\n      // use importScripts in classic web worker\n      globalThis.importScripts(url);\n    } catch (e) {\n      // importScripts throws TypeError in a module type web worker, use import instead\n      if (e instanceof TypeError) {\n        await import(/* webpackIgnore: true */ url);\n      } else {\n        throw e;\n      }\n    }\n  };\n} else if (IN_NODE) {\n  loadScript = nodeLoadScript;\n} else {\n  throw new Error(\"Cannot determine runtime environment\");\n}\n\n/**\n * Load a text file and executes it as Javascript\n * @param url The path to load. May be a url or a relative file system path.\n * @private\n */\nasync function nodeLoadScript(url: string) {\n  if (url.startsWith(\"file://\")) {\n    // handle file:// with filesystem operations rather than with fetch.\n    url = url.slice(\"file://\".length);\n  }\n  if (url.includes(\"://\")) {\n    // If it's a url, load it with fetch then eval it.\n    nodeVmMod.runInThisContext(await (await fetch(url)).text());\n  } else {\n    // Otherwise, hopefully it is a relative path we can load from the file\n    // system.\n    await import(/* webpackIgnore: true */ nodeUrlMod.pathToFileURL(url).href);\n  }\n}\n\nexport async function loadLockFile(lockFileURL: string): Promise<Lockfile> {\n  if (IN_NODE) {\n    await initNodeModules();\n    const package_string = await nodeFsPromisesMod.readFile(lockFileURL, {\n      encoding: \"utf8\",\n    });\n    return JSON.parse(package_string);\n  } else {\n    let response = await fetch(lockFileURL);\n    return await response.json();\n  }\n}\n\n/**\n * Calculate the directory name of the current module.\n * This is used to guess the indexURL when it is not provided.\n */\nexport async function calculateDirname(): Promise<string> {\n  if (IN_NODE_COMMONJS) {\n    return __dirname;\n  }\n\n  let err: Error;\n  try {\n    throw new Error();\n  } catch (e) {\n    err = e as Error;\n  }\n  let fileName = ErrorStackParser.parse(err)[0].fileName!;\n\n  if (IN_NODE_ESM) {\n    const nodePath = await import(\"node:path\");\n    const nodeUrl = await import(\"node:url\");\n\n    // FIXME: We would like to use import.meta.url here,\n    // but mocha seems to mess with compiling typescript files to ES6.\n    return nodeUrl.fileURLToPath(nodePath.dirname(fileName));\n  }\n\n  const indexOfLastSlash = fileName.lastIndexOf(pathSep);\n  if (indexOfLastSlash === -1) {\n    throw new Error(\n      \"Could not extract indexURL path from pyodide module location\",\n    );\n  }\n  return fileName.slice(0, indexOfLastSlash);\n}\n", "// @ts-nocheck\n\n/** @private */\nexport const IN_NODE =\n  typeof process === \"object\" &&\n  typeof process.versions === \"object\" &&\n  typeof process.versions.node === \"string\" &&\n  typeof process.browser ===\n    \"undefined\"; /* This last condition checks if we run the browser shim of process */\n\n/** @private */\nexport const IN_NODE_COMMONJS =\n  IN_NODE &&\n  typeof module !== \"undefined\" &&\n  typeof module.exports !== \"undefined\" &&\n  typeof require !== \"undefined\" &&\n  typeof __dirname !== \"undefined\";\n\n/** @private */\nexport const IN_NODE_ESM = IN_NODE && !IN_NODE_COMMONJS;\n\n/** @private */\nexport const IN_DENO = typeof Deno !== \"undefined\"; // just in case...\n\n/** @private */\nexport const IN_BROWSER = !IN_NODE && !IN_DENO;\n\n/** @private */\nexport const IN_BROWSER_MAIN_THREAD =\n  IN_BROWSER &&\n  typeof window === \"object\" &&\n  typeof document === \"object\" &&\n  typeof document.createElement === \"function\" &&\n  typeof sessionStorage === \"object\" &&\n  typeof importScripts !== \"function\";\n\n/** @private */\nexport const IN_BROWSER_WEB_WORKER =\n  IN_BROWSER && typeof importScripts === \"function\" && typeof self === \"object\";\n\n/** @private */\nexport const IN_SAFARI =\n  typeof navigator === \"object\" &&\n  typeof navigator.userAgent === \"string\" &&\n  navigator.userAgent.indexOf(\"Chrome\") == -1 &&\n  navigator.userAgent.indexOf(\"Safari\") > -1;\n\n/**\n * Detects the current environment and returns a record with the results.\n * This function is useful for debugging and testing purposes.\n * @private\n */\nexport function detectEnvironment(): Record<string, boolean> {\n  return {\n    IN_NODE: IN_NODE,\n    IN_NODE_COMMONJS: IN_NODE_COMMONJS,\n    IN_NODE_ESM: IN_NODE_ESM,\n    IN_DENO: IN_DENO,\n    IN_BROWSER: IN_BROWSER,\n    IN_BROWSER_MAIN_THREAD: IN_BROWSER_MAIN_THREAD,\n    IN_BROWSER_WEB_WORKER: IN_BROWSER_WEB_WORKER,\n    IN_SAFARI: IN_SAFARI,\n  };\n}\n", "import { Module } from \"./types\";\n\n/**\n * @private\n */\nexport function initializeNativeFS(module: Module) {\n  const FS = module.FS;\n  const MEMFS = module.FS.filesystems.MEMFS;\n  const PATH = module.PATH;\n\n  const nativeFSAsync = {\n    // DIR_MODE: {{{ cDefine('S_IFDIR') }}} | 511 /* 0777 */,\n    // FILE_MODE: {{{ cDefine('S_IFREG') }}} | 511 /* 0777 */,\n    DIR_MODE: 16384 | 511,\n    FILE_MODE: 32768 | 511,\n    mount: function (mount: any) {\n      if (!mount.opts.fileSystemHandle) {\n        throw new Error(\"opts.fileSystemHandle is required\");\n      }\n\n      // reuse all of the core MEMFS functionality\n      return MEMFS.mount.apply(null, arguments);\n    },\n    syncfs: async (mount: any, populate: Boolean, callback: Function) => {\n      try {\n        const local = nativeFSAsync.getLocalSet(mount);\n        const remote = await nativeFSAsync.getRemoteSet(mount);\n        const src = populate ? remote : local;\n        const dst = populate ? local : remote;\n        await nativeFSAsync.reconcile(mount, src, dst);\n        callback(null);\n      } catch (e) {\n        callback(e);\n      }\n    },\n    // Returns file set of emscripten's filesystem at the mountpoint.\n    getLocalSet: (mount: any) => {\n      let entries = Object.create(null);\n\n      function isRealDir(p: string) {\n        return p !== \".\" && p !== \"..\";\n      }\n\n      function toAbsolute(root: string) {\n        return (p: string) => {\n          return PATH.join2(root, p);\n        };\n      }\n\n      let check = FS.readdir(mount.mountpoint)\n        .filter(isRealDir)\n        .map(toAbsolute(mount.mountpoint));\n\n      while (check.length) {\n        let path = check.pop();\n        let stat = FS.stat(path);\n\n        if (FS.isDir(stat.mode)) {\n          check.push.apply(\n            check,\n            FS.readdir(path).filter(isRealDir).map(toAbsolute(path)),\n          );\n        }\n\n        entries[path] = { timestamp: stat.mtime, mode: stat.mode };\n      }\n\n      return { type: \"local\", entries: entries };\n    },\n    // Returns file set of the real, on-disk filesystem at the mountpoint.\n    getRemoteSet: async (mount: any) => {\n      // TODO: this should be a map.\n      const entries = Object.create(null);\n\n      const handles = await getFsHandles(mount.opts.fileSystemHandle);\n      for (const [path, handle] of handles) {\n        if (path === \".\") continue;\n\n        entries[PATH.join2(mount.mountpoint, path)] = {\n          timestamp:\n            handle.kind === \"file\"\n              ? (await handle.getFile()).lastModifiedDate\n              : new Date(),\n          mode:\n            handle.kind === \"file\"\n              ? nativeFSAsync.FILE_MODE\n              : nativeFSAsync.DIR_MODE,\n        };\n      }\n\n      return { type: \"remote\", entries, handles };\n    },\n    loadLocalEntry: (path: string) => {\n      const lookup = FS.lookupPath(path);\n      const node = lookup.node;\n      const stat = FS.stat(path);\n\n      if (FS.isDir(stat.mode)) {\n        return { timestamp: stat.mtime, mode: stat.mode };\n      } else if (FS.isFile(stat.mode)) {\n        node.contents = MEMFS.getFileDataAsTypedArray(node);\n        return {\n          timestamp: stat.mtime,\n          mode: stat.mode,\n          contents: node.contents,\n        };\n      } else {\n        throw new Error(\"node type not supported\");\n      }\n    },\n    storeLocalEntry: (path: string, entry: any) => {\n      if (FS.isDir(entry[\"mode\"])) {\n        FS.mkdirTree(path, entry[\"mode\"]);\n      } else if (FS.isFile(entry[\"mode\"])) {\n        FS.writeFile(path, entry[\"contents\"], { canOwn: true });\n      } else {\n        throw new Error(\"node type not supported\");\n      }\n\n      FS.chmod(path, entry[\"mode\"]);\n      FS.utime(path, entry[\"timestamp\"], entry[\"timestamp\"]);\n    },\n    removeLocalEntry: (path: string) => {\n      var stat = FS.stat(path);\n\n      if (FS.isDir(stat.mode)) {\n        FS.rmdir(path);\n      } else if (FS.isFile(stat.mode)) {\n        FS.unlink(path);\n      }\n    },\n    loadRemoteEntry: async (handle: any) => {\n      if (handle.kind === \"file\") {\n        const file = await handle.getFile();\n        return {\n          contents: new Uint8Array(await file.arrayBuffer()),\n          mode: nativeFSAsync.FILE_MODE,\n          timestamp: file.lastModifiedDate,\n        };\n      } else if (handle.kind === \"directory\") {\n        return {\n          mode: nativeFSAsync.DIR_MODE,\n          timestamp: new Date(),\n        };\n      } else {\n        throw new Error(\"unknown kind: \" + handle.kind);\n      }\n    },\n    storeRemoteEntry: async (handles: any, path: string, entry: any) => {\n      const parentDirHandle = handles.get(PATH.dirname(path));\n      const handle = FS.isFile(entry.mode)\n        ? await parentDirHandle.getFileHandle(PATH.basename(path), {\n            create: true,\n          })\n        : await parentDirHandle.getDirectoryHandle(PATH.basename(path), {\n            create: true,\n          });\n      if (handle.kind === \"file\") {\n        const writable = await handle.createWritable();\n        await writable.write(entry.contents);\n        await writable.close();\n      }\n      handles.set(path, handle);\n    },\n    removeRemoteEntry: async (handles: any, path: string) => {\n      const parentDirHandle = handles.get(PATH.dirname(path));\n      await parentDirHandle.removeEntry(PATH.basename(path));\n      handles.delete(path);\n    },\n    reconcile: async (mount: any, src: any, dst: any) => {\n      let total = 0;\n\n      const create: Array<string> = [];\n      Object.keys(src.entries).forEach(function (key) {\n        const e = src.entries[key];\n        const e2 = dst.entries[key];\n        if (\n          !e2 ||\n          (FS.isFile(e.mode) &&\n            e[\"timestamp\"].getTime() > e2[\"timestamp\"].getTime())\n        ) {\n          create.push(key);\n          total++;\n        }\n      });\n      // sort paths in ascending order so directory entries are created\n      // before the files inside them\n      create.sort();\n\n      const remove: Array<string> = [];\n      Object.keys(dst.entries).forEach(function (key) {\n        if (!src.entries[key]) {\n          remove.push(key);\n          total++;\n        }\n      });\n      // sort paths in descending order so files are deleted before their\n      // parent directories\n      remove.sort().reverse();\n\n      if (!total) {\n        return;\n      }\n\n      const handles = src.type === \"remote\" ? src.handles : dst.handles;\n\n      for (const path of create) {\n        const relPath = PATH.normalize(\n          path.replace(mount.mountpoint, \"/\"),\n        ).substring(1);\n        if (dst.type === \"local\") {\n          const handle = handles.get(relPath);\n          const entry = await nativeFSAsync.loadRemoteEntry(handle);\n          nativeFSAsync.storeLocalEntry(path, entry);\n        } else {\n          const entry = nativeFSAsync.loadLocalEntry(path);\n          await nativeFSAsync.storeRemoteEntry(handles, relPath, entry);\n        }\n      }\n\n      for (const path of remove) {\n        if (dst.type === \"local\") {\n          nativeFSAsync.removeLocalEntry(path);\n        } else {\n          const relPath = PATH.normalize(\n            path.replace(mount.mountpoint, \"/\"),\n          ).substring(1);\n          await nativeFSAsync.removeRemoteEntry(handles, relPath);\n        }\n      }\n    },\n  };\n\n  module.FS.filesystems.NATIVEFS_ASYNC = nativeFSAsync;\n}\n\nconst getFsHandles = async (dirHandle: any) => {\n  const handles: any = [];\n\n  async function collect(curDirHandle: any) {\n    for await (const entry of curDirHandle.values()) {\n      handles.push(entry);\n      if (entry.kind === \"directory\") {\n        await collect(entry);\n      }\n    }\n  }\n\n  await collect(dirHandle);\n\n  const result = new Map();\n  result.set(\".\", dirHandle);\n  for (const handle of handles) {\n    const relativePath = (await dirHandle.resolve(handle)).join(\"/\");\n    result.set(relativePath, handle);\n  }\n  return result;\n};\n", "/** @private */\n\nimport { ConfigType } from \"./pyodide\";\nimport { initializeNativeFS } from \"./nativefs\";\nimport { loadBinaryFile, getBinaryResponse } from \"./compat\";\nimport { API, PreRunFunc } from \"./types\";\n\n/**\n * @private\n * @hidden\n */\nexport interface EmscriptenSettings {\n  readonly noImageDecoding?: boolean;\n  readonly noAudioDecoding?: boolean;\n  readonly noWasmDecoding?: boolean;\n  readonly preRun: readonly PreRunFunc[];\n  readonly quit: (status: number, toThrow: Error) => void;\n  readonly print?: (a: string) => void;\n  readonly printErr?: (a: string) => void;\n  readonly arguments: readonly string[];\n  readonly instantiateWasm?: (\n    imports: { [key: string]: any },\n    successCallback: (\n      instance: WebAssembly.Instance,\n      module: WebAssembly.Module,\n    ) => void,\n  ) => void;\n  readonly API: API;\n  readonly locateFile: (file: string) => string;\n\n  exited?: { readonly status: number; readonly toThrow: Error };\n  noInitialRun?: boolean;\n  INITIAL_MEMORY?: number;\n}\n\n/**\n * Get the base settings to use to load Pyodide.\n *\n * @private\n */\nexport function createSettings(config: ConfigType): EmscriptenSettings {\n  const settings: EmscriptenSettings = {\n    noImageDecoding: true,\n    noAudioDecoding: true,\n    noWasmDecoding: false,\n    preRun: getFileSystemInitializationFuncs(config),\n    quit(status: number, toThrow: Error) {\n      // It's a little bit hacky that we set this on the settings object but\n      // it's not that easy to get access to the Module object from here.\n      settings.exited = { status, toThrow };\n      throw toThrow;\n    },\n    print: config.stdout,\n    printErr: config.stderr,\n    arguments: config.args,\n    API: { config } as API,\n    // Emscripten calls locateFile exactly one time with argument\n    // pyodide.asm.wasm to get the URL it should download it from.\n    //\n    // If we set instantiateWasm the return value of locateFile actually is\n    // unused, but Emscripten calls it anyways. We set instantiateWasm except\n    // when compiling with source maps, see comment in getInstantiateWasmFunc().\n    //\n    // It also is called when Emscripten tries to find a dependency of a shared\n    // library but it failed to find it in the file system. But for us that\n    // means dependency resolution has already failed and we want to throw an\n    // error anyways.\n    locateFile: (path: string) => config.indexURL + path,\n    instantiateWasm: getInstantiateWasmFunc(config.indexURL),\n  };\n  return settings;\n}\n\n/**\n * Make the home directory inside the virtual file system,\n * then change the working directory to it.\n *\n * @param Module The Emscripten Module.\n * @param path The path to the home directory.\n * @private\n */\nfunction createHomeDirectory(path: string): PreRunFunc {\n  return function (Module) {\n    const fallbackPath = \"/\";\n    try {\n      Module.FS.mkdirTree(path);\n    } catch (e) {\n      console.error(`Error occurred while making a home directory '${path}':`);\n      console.error(e);\n      console.error(`Using '${fallbackPath}' for a home directory instead`);\n      path = fallbackPath;\n    }\n    Module.FS.chdir(path);\n  };\n}\n\nfunction setEnvironment(env: { [key: string]: string }): PreRunFunc {\n  return function (Module) {\n    Object.assign(Module.ENV, env);\n  };\n}\n\n/**\n * Mount local directories to the virtual file system. Only for Node.js.\n * @param mounts The list of paths to mount.\n */\nfunction mountLocalDirectories(mounts: string[]): PreRunFunc {\n  return (Module) => {\n    for (const mount of mounts) {\n      Module.FS.mkdirTree(mount);\n      Module.FS.mount(Module.FS.filesystems.NODEFS, { root: mount }, mount);\n    }\n  };\n}\n\n/**\n * Install the Python standard library to the virtual file system.\n *\n * Previously, this was handled by Emscripten's file packager (pyodide.asm.data).\n * However, using the file packager means that we have only one version\n * of the standard library available. We want to be able to use different\n * versions of the standard library, for example:\n *\n * - Use compiled(.pyc) or uncompiled(.py) standard library.\n * - Remove unused modules or add additional modules using bundlers like pyodide-pack.\n *\n * @param stdlibURL The URL for the Python standard library\n */\nfunction installStdlib(stdlibURL: string): PreRunFunc {\n  const stdlibPromise: Promise<Uint8Array> = loadBinaryFile(stdlibURL);\n  return (Module) => {\n    /* @ts-ignore */\n    const pymajor = Module._py_version_major();\n    /* @ts-ignore */\n    const pyminor = Module._py_version_minor();\n\n    Module.FS.mkdirTree(\"/lib\");\n    Module.FS.mkdirTree(`/lib/python${pymajor}.${pyminor}/site-packages`);\n\n    Module.addRunDependency(\"install-stdlib\");\n\n    stdlibPromise\n      .then((stdlib: Uint8Array) => {\n        Module.FS.writeFile(`/lib/python${pymajor}${pyminor}.zip`, stdlib);\n      })\n      .catch((e) => {\n        console.error(\"Error occurred while installing the standard library:\");\n        console.error(e);\n      })\n      .finally(() => {\n        Module.removeRunDependency(\"install-stdlib\");\n      });\n  };\n}\n\n/**\n * Initialize the virtual file system, before loading Python interpreter.\n * @private\n */\nfunction getFileSystemInitializationFuncs(config: ConfigType): PreRunFunc[] {\n  let stdLibURL;\n  if (config.stdLibURL != undefined) {\n    stdLibURL = config.stdLibURL;\n  } else {\n    stdLibURL = config.indexURL + \"python_stdlib.zip\";\n  }\n\n  return [\n    installStdlib(stdLibURL),\n    createHomeDirectory(config.env.HOME),\n    setEnvironment(config.env),\n    mountLocalDirectories(config._node_mounts),\n    initializeNativeFS,\n  ];\n}\n\nfunction getInstantiateWasmFunc(\n  indexURL: string,\n): EmscriptenSettings[\"instantiateWasm\"] {\n  if (SOURCEMAP) {\n    // According to the docs:\n    //\n    // \"Sanitizers or source map is currently not supported if overriding\n    // WebAssembly instantiation with Module.instantiateWasm.\"\n    // https://emscripten.org/docs/api_reference/module.html?highlight=instantiatewasm#Module.instantiateWasm\n    //\n    // I haven't checked if this is actually a problem in practice.\n    return;\n  }\n  const { binary, response } = getBinaryResponse(indexURL + \"pyodide.asm.wasm\");\n  return function (\n    imports: { [key: string]: any },\n    successCallback: (\n      instance: WebAssembly.Instance,\n      module: WebAssembly.Module,\n    ) => void,\n  ) {\n    (async function () {\n      try {\n        let res: WebAssembly.WebAssemblyInstantiatedSource;\n        if (response) {\n          res = await WebAssembly.instantiateStreaming(response, imports);\n        } else {\n          res = await WebAssembly.instantiate(await binary, imports);\n        }\n        const { instance, module } = res;\n        // When overriding instantiateWasm, in asan builds, we also need\n        // to take care of creating the WasmOffsetConverter\n        // @ts-ignore\n        if (typeof WasmOffsetConverter !== \"undefined\") {\n          // @ts-ignore\n          wasmOffsetConverter = new WasmOffsetConverter(wasmBinary, module);\n        }\n        successCallback(instance, module);\n      } catch (e) {\n        console.warn(\"wasm instantiation failed!\");\n        console.warn(e);\n      }\n    })();\n\n    return {}; // Compiling asynchronously, no exports.\n  };\n}\n", "/**\n *\n * The Pyodide version.\n *\n * The version here is a Python version, following :pep:`440`. This is different\n * from the version in ``package.json`` which follows the node package manager\n * version convention.\n */\nexport const version: string = \"0.26.0\";\n", "/**\n * The main bootstrap code for loading pyodide.\n */\nimport {\n  calculateDirname,\n  loadScript,\n  initNodeModules,\n  resolvePath,\n  loadLockFile,\n} from \"./compat\";\n\nimport { createSettings } from \"./emscripten-settings\";\nimport { version } from \"./version\";\n\nimport type { PyodideInterface } from \"./api.js\";\nimport type { TypedArray, Module } from \"./types\";\nimport type { EmscriptenSettings } from \"./emscripten-settings\";\nimport type { PackageData } from \"./load-package\";\nimport { SnapshotConfig } from \"./snapshot\";\nexport type { PyodideInterface, TypedArray };\n\nexport { version, type PackageData };\n\ndeclare function _createPyodideModule(\n  settings: EmscriptenSettings,\n): Promise<Module>;\n\n/**\n * See documentation for loadPyodide.\n * @hidden\n */\nexport type ConfigType = {\n  indexURL: string;\n  packageCacheDir: string;\n  lockFileURL: string;\n  fullStdLib?: boolean;\n  stdLibURL?: string;\n  stdin?: () => string;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n  jsglobals?: object;\n  args: string[];\n  _node_mounts: string[];\n  env: { [key: string]: string };\n  packages: string[];\n  _makeSnapshot: boolean;\n};\n\n/**\n * Load the main Pyodide wasm module and initialize it.\n *\n * @returns The :ref:`js-api-pyodide` module.\n * @memberof globalThis\n * @async\n * @example\n * async function main() {\n *   const pyodide = await loadPyodide({\n *     fullStdLib: true,\n *     stdout: (msg) => console.log(`Pyodide: ${msg}`),\n *   });\n *   console.log(\"Loaded Pyodide\");\n * }\n * main();\n */\nexport async function loadPyodide(\n  options: {\n    /**\n     * The URL from which Pyodide will load the main Pyodide runtime and\n     * packages. It is recommended that you leave this unchanged, providing an\n     * incorrect value can cause broken behavior.\n     *\n     * Default: The url that Pyodide is loaded from with the file name\n     * (``pyodide.js`` or ``pyodide.mjs``) removed.\n     */\n    indexURL?: string;\n\n    /**\n     * The file path where packages will be cached in node. If a package\n     * exists in ``packageCacheDir`` it is loaded from there, otherwise it is\n     * downloaded from the JsDelivr CDN and then cached into ``packageCacheDir``.\n     * Only applies when running in node; ignored in browsers.\n     *\n     * Default: same as indexURL\n     */\n    packageCacheDir?: string;\n\n    /**\n     * The URL from which Pyodide will load the Pyodide ``pyodide-lock.json`` lock\n     * file. You can produce custom lock files with :py:func:`micropip.freeze`.\n     * Default: ```${indexURL}/pyodide-lock.json```\n     */\n    lockFileURL?: string;\n    /**\n     * Load the full Python standard library. Setting this to false excludes\n     * unvendored modules from the standard library.\n     * Default: ``false``\n     */\n    fullStdLib?: boolean;\n    /**\n     * The URL from which to load the standard library ``python_stdlib.zip``\n     * file. This URL includes the most of the Python standard library. Some\n     * stdlib modules were unvendored, and can be loaded separately\n     * with ``fullStdLib: true`` option or by their package name.\n     * Default: ```${indexURL}/python_stdlib.zip```\n     */\n    stdLibURL?: string;\n    /**\n     * Override the standard input callback. Should ask the user for one line of\n     * input. The :js:func:`pyodide.setStdin` function is more flexible and\n     * should be preferred.\n     */\n    stdin?: () => string;\n    /**\n     * Override the standard output callback. The :js:func:`pyodide.setStdout`\n     * function is more flexible and should be preferred in most cases, but\n     * depending on the ``args`` passed to ``loadPyodide``, Pyodide may write to\n     * stdout on startup, which can only be controlled by passing a custom\n     * ``stdout`` function.\n     */\n    stdout?: (msg: string) => void;\n    /**\n     * Override the standard error output callback. The\n     * :js:func:`pyodide.setStderr` function is more flexible and should be\n     * preferred in most cases, but depending on the ``args`` passed to\n     * ``loadPyodide``, Pyodide may write to stdout on startup, which can only\n     * be controlled by passing a custom ``stdout`` function.\n     */\n    stderr?: (msg: string) => void;\n    /**\n     * The object that Pyodide will use for the ``js`` module.\n     * Default: ``globalThis``\n     */\n    jsglobals?: object;\n    /**\n     * Command line arguments to pass to Python on startup. See `Python command\n     * line interface options\n     * <https://docs.python.org/3.10/using/cmdline.html#interface-options>`_ for\n     * more details. Default: ``[]``\n     */\n    args?: string[];\n    /**\n     * Environment variables to pass to Python. This can be accessed inside of\n     * Python at runtime via :py:data:`os.environ`. Certain environment variables change\n     * the way that Python loads:\n     * https://docs.python.org/3.10/using/cmdline.html#environment-variables\n     * Default: ``{}``.\n     * If ``env.HOME`` is undefined, it will be set to a default value of\n     * ``\"/home/pyodide\"``\n     */\n    env?: { [key: string]: string };\n    /**\n     * A list of packages to load as Pyodide is initializing.\n     *\n     * This is the same as loading the packages with\n     * :js:func:`pyodide.loadPackage` after Pyodide is loaded except using the\n     * ``packages`` option is more efficient because the packages are downloaded\n     * while Pyodide bootstraps itself.\n     */\n    packages?: string[];\n    /**\n     * Opt into the old behavior where :js:func:`PyProxy.toString() <pyodide.ffi.PyProxy.toString>`\n     * calls :py:func:`repr` and not :py:class:`str() <str>`.\n     * @deprecated\n     */\n    pyproxyToStringRepr?: boolean;\n    /**\n     * @ignore\n     */\n    _node_mounts?: string[];\n    /**\n     * @ignore\n     */\n    _makeSnapshot?: boolean;\n    /**\n     * @ignore\n     */\n    _loadSnapshot?:\n      | Uint8Array\n      | ArrayBuffer\n      | PromiseLike<Uint8Array | ArrayBuffer>;\n  } = {},\n): Promise<PyodideInterface> {\n  await initNodeModules();\n  let indexURL = options.indexURL || (await calculateDirname());\n  indexURL = resolvePath(indexURL); // A relative indexURL causes havoc.\n  if (!indexURL.endsWith(\"/\")) {\n    indexURL += \"/\";\n  }\n  options.indexURL = indexURL;\n\n  const default_config = {\n    fullStdLib: false,\n    jsglobals: globalThis,\n    stdin: globalThis.prompt ? globalThis.prompt : undefined,\n    lockFileURL: indexURL + \"pyodide-lock.json\",\n    args: [],\n    _node_mounts: [],\n    env: {},\n    packageCacheDir: indexURL,\n    packages: [],\n  };\n  const config = Object.assign(default_config, options) as ConfigType;\n  if (!config.env.HOME) {\n    config.env.HOME = \"/home/pyodide\";\n  }\n  const emscriptenSettings = createSettings(config);\n  const API = emscriptenSettings.API;\n  API.lockFilePromise = loadLockFile(config.lockFileURL);\n\n  // If the pyodide.asm.js script has been imported, we can skip the dynamic import\n  // Users can then do a static import of the script in environments where\n  // dynamic importing is not allowed or not desirable, like module-type service workers\n  if (typeof _createPyodideModule !== \"function\") {\n    const scriptSrc = `${config.indexURL}pyodide.asm.js`;\n    await loadScript(scriptSrc);\n  }\n\n  let snapshot: Uint8Array | undefined = undefined;\n  if (options._loadSnapshot) {\n    const snp = await options._loadSnapshot;\n    if (ArrayBuffer.isView(snp)) {\n      snapshot = snp;\n    } else {\n      snapshot = new Uint8Array(snp);\n    }\n    emscriptenSettings.noInitialRun = true;\n    // @ts-ignore\n    emscriptenSettings.INITIAL_MEMORY = snapshot.length;\n  }\n\n  // _createPyodideModule is specified in the Makefile by the linker flag:\n  // `-s EXPORT_NAME=\"'_createPyodideModule'\"`\n  const Module = await _createPyodideModule(emscriptenSettings);\n  // Handle early exit\n  if (emscriptenSettings.exited) {\n    throw emscriptenSettings.exited.toThrow;\n  }\n  if (options.pyproxyToStringRepr) {\n    API.setPyProxyToStringMethod(true);\n  }\n\n  if (API.version !== version) {\n    throw new Error(\n      `\\\nPyodide version does not match: '${version}' <==> '${API.version}'. \\\nIf you updated the Pyodide version, make sure you also updated the 'indexURL' parameter passed to loadPyodide.\\\n`,\n    );\n  }\n  // Disable further loading of Emscripten file_packager stuff.\n  Module.locateFile = (path: string) => {\n    throw new Error(\"Didn't expect to load any more file_packager files!\");\n  };\n\n  let snapshotConfig: SnapshotConfig | undefined = undefined;\n  if (snapshot) {\n    snapshotConfig = API.restoreSnapshot(snapshot);\n  }\n  // runPython works starting after the call to finalizeBootstrap.\n  const pyodide = API.finalizeBootstrap(snapshotConfig);\n  API.sys.path.insert(0, API.config.env.HOME);\n\n  if (!pyodide.version.includes(\"dev\")) {\n    // Currently only used in Node to download packages the first time they are\n    // loaded. But in other cases it's harmless.\n    API.setCdnUrl(`https://cdn.jsdelivr.net/pyodide/v${pyodide.version}/full/`);\n  }\n  API._pyodide.set_excepthook();\n  await API.packageIndexReady;\n  // I think we want this initializeStreams call to happen after\n  // packageIndexReady? I don't remember why.\n  API.initializeStreams(config.stdin, config.stdout, config.stderr);\n  return pyodide;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,IAAAC,EAAA,CAAAC,GAAAC,MAAA;AAAA,GAAC,SAASC,GAAMC,GAAS;AACrB;AAII,WAAO,UAAW,cAAc,OAAO,MACvC,OAAO,cAAc,CAAC,GAAGA,CAAO,IACzB,OAAOH,KAAY,WAC1BC,EAAO,UAAUE,EAAQ,IAEzBD,EAAK,aAAaC,EAAQ;EAElC,GAAEH,GAAM,WAAW;AACf;AACA,aAASI,EAAUC,GAAG;AAClB,aAAO,CAAC,MAAM,WAAWA,CAAC,CAAC,KAAK,SAASA,CAAC;IAC9C;AAFSC,MAAAF,GAAA,WAAA;AAIT,aAASG,EAAYC,GAAK;AACtB,aAAOA,EAAI,OAAO,CAAC,EAAE,YAAY,IAAIA,EAAI,UAAU,CAAC;IACxD;AAFSF,MAAAC,GAAA,aAAA;AAIT,aAASE,EAAQC,GAAG;AAChB,aAAO,WAAW;AACd,eAAO,KAAKA,CAAC;MACjB;IACJ;AAJSJ,MAAAG,GAAA,SAAA;AAMT,QAAIE,IAAe,CAAC,iBAAiB,UAAU,YAAY,YAAY,GACnEC,IAAe,CAAC,gBAAgB,YAAY,GAC5CC,IAAc,CAAC,YAAY,gBAAgB,QAAQ,GACnDC,IAAa,CAAC,MAAM,GACpBC,IAAc,CAAC,YAAY,GAE3BC,IAAQL,EAAa,OAAOC,GAAcC,GAAaC,GAAYC,CAAW;AAElF,aAASE,EAAWC,GAAK;AACrB,UAAKA;AACL,iBAASC,IAAI,GAAGA,IAAIH,EAAM,QAAQG;AAC1BD,YAAIF,EAAMG,CAAC,CAAC,MAAM,UAClB,KAAK,QAAQZ,EAAYS,EAAMG,CAAC,CAAC,CAAC,EAAED,EAAIF,EAAMG,CAAC,CAAC,CAAC;IAG7D;AAPSb,MAAAW,GAAA,YAAA,GASTA,EAAW,YAAY,EACnB,SAAS,WAAW;AAChB,aAAO,KAAK;IAChB,GACA,SAAS,SAASG,GAAG;AACjB,UAAI,OAAO,UAAU,SAAS,KAAKA,CAAC,MAAM;AACtC,cAAM,IAAI,UAAU,uBAAuB;AAE/C,WAAK,OAAOA;IAChB,GAEA,eAAe,WAAW;AACtB,aAAO,KAAK;IAChB,GACA,eAAe,SAASA,GAAG;AACvB,UAAIA,aAAaH;AACb,aAAK,aAAaG;eACXA,aAAa;AACpB,aAAK,aAAa,IAAIH,EAAWG,CAAC;;AAElC,cAAM,IAAI,UAAU,6CAA6C;IAEzE,GAEA,UAAU,WAAW;AACjB,UAAIC,IAAW,KAAK,YAAY,KAAK,IACjCC,IAAa,KAAK,cAAc,KAAK,IACrCC,IAAe,KAAK,gBAAgB,KAAK,IACzCC,IAAe,KAAK,gBAAgB,KAAK;AAC7C,aAAI,KAAK,UAAU,IACXH,IACO,aAAaA,IAAW,MAAMC,IAAa,MAAMC,IAAe,MAEpE,YAAYD,IAAa,MAAMC,IAEtCC,IACOA,IAAe,OAAOH,IAAW,MAAMC,IAAa,MAAMC,IAAe,MAE7EF,IAAW,MAAMC,IAAa,MAAMC;IAC/C,EACJ,GAEAN,EAAW,aAAaX,EAAA,SAAgCE,GAAK;AACzD,UAAIiB,IAAiBjB,EAAI,QAAQ,GAAG,GAChCkB,IAAelB,EAAI,YAAY,GAAG,GAElCgB,IAAehB,EAAI,UAAU,GAAGiB,CAAc,GAC9CE,IAAOnB,EAAI,UAAUiB,IAAiB,GAAGC,CAAY,EAAE,MAAM,GAAG,GAChEE,IAAiBpB,EAAI,UAAUkB,IAAe,CAAC;AAEnD,UAAIE,EAAe,QAAQ,GAAG,MAAM;AAChC,YAAIC,IAAQ,gCAAgC,KAAKD,GAAgB,EAAE,GAC/DP,KAAWQ,EAAM,CAAC,GAClBP,KAAaO,EAAM,CAAC,GACpBN,KAAeM,EAAM,CAAC;AAG9B,aAAO,IAAIZ,EAAW,EAClB,cAAcO,GACd,MAAMG,KAAQ,QACd,UAAUN,IACV,YAAYC,MAAc,QAC1B,cAAcC,MAAgB,OAClC,CAAC;IACL,GAtBwB,wBAAA;AAwBxB,aAASJ,IAAI,GAAGA,IAAIR,EAAa,QAAQQ;AACrCF,QAAW,UAAU,QAAQV,EAAYI,EAAaQ,CAAC,CAAC,CAAC,IAAIV,EAAQE,EAAaQ,CAAC,CAAC,GACpFF,EAAW,UAAU,QAAQV,EAAYI,EAAaQ,CAAC,CAAC,CAAC,IAAK,yBAAST,GAAG;AACtE,eAAO,SAASU,GAAG;AACf,eAAKV,CAAC,IAAI,CAAA,CAAQU;QACtB;MACJ,EAAGT,EAAaQ,CAAC,CAAC;AAGtB,aAASW,IAAI,GAAGA,IAAIlB,EAAa,QAAQkB;AACrCb,QAAW,UAAU,QAAQV,EAAYK,EAAakB,CAAC,CAAC,CAAC,IAAIrB,EAAQG,EAAakB,CAAC,CAAC,GACpFb,EAAW,UAAU,QAAQV,EAAYK,EAAakB,CAAC,CAAC,CAAC,IAAK,yBAASpB,GAAG;AACtE,eAAO,SAASU,GAAG;AACf,cAAI,CAAChB,EAAUgB,CAAC;AACZ,kBAAM,IAAI,UAAUV,IAAI,mBAAmB;AAE/C,eAAKA,CAAC,IAAI,OAAOU,CAAC;QACtB;MACJ,EAAGR,EAAakB,CAAC,CAAC;AAGtB,aAASC,IAAI,GAAGA,IAAIlB,EAAY,QAAQkB;AACpCd,QAAW,UAAU,QAAQV,EAAYM,EAAYkB,CAAC,CAAC,CAAC,IAAItB,EAAQI,EAAYkB,CAAC,CAAC,GAClFd,EAAW,UAAU,QAAQV,EAAYM,EAAYkB,CAAC,CAAC,CAAC,IAAK,yBAASrB,GAAG;AACrE,eAAO,SAASU,GAAG;AACf,eAAKV,CAAC,IAAI,OAAOU,CAAC;QACtB;MACJ,EAAGP,EAAYkB,CAAC,CAAC;AAGrB,WAAOd;EACX,CAAC;AAAA,CAAA;AC9ID,IAAAe,IAAAjC,EAAA,CAAAC,GAAAC,MAAA;AAAA,GAAC,SAASC,GAAMC,GAAS;AACrB;AAII,WAAO,UAAW,cAAc,OAAO,MACvC,OAAO,sBAAsB,CAAC,YAAY,GAAGA,CAAO,IAC7C,OAAOH,KAAY,WAC1BC,EAAO,UAAUE,EAAQ,EAAA,CAAqB,IAE9CD,EAAK,mBAAmBC,EAAQD,EAAK,UAAU;EAEvD,GAAEF,GAAMM,EAAA,SAA0BW,GAAY;AAC1C;AAEA,QAAIgB,IAA8B,gBAC9BC,IAAyB,kCACzBC,IAA4B;AAEhC,WAAO,EAOH,OAAO7B,EAAA,SAAiC8B,GAAO;AAC3C,UAAI,OAAOA,EAAM,aAAe,OAAe,OAAOA,EAAM,iBAAiB,IAAM;AAC/E,eAAO,KAAK,WAAWA,CAAK;AACzB,UAAIA,EAAM,SAASA,EAAM,MAAM,MAAMF,CAAsB;AAC9D,eAAO,KAAK,YAAYE,CAAK;AAC1B,UAAIA,EAAM;AACb,eAAO,KAAK,gBAAgBA,CAAK;AAEjC,YAAM,IAAI,MAAM,iCAAiC;IAEzD,GAVO,yBAAA,GAaP,iBAAiB9B,EAAA,SAA2C+B,GAAS;AAEjE,UAAIA,EAAQ,QAAQ,GAAG,MAAM;AACzB,eAAO,CAACA,CAAO;AAGnB,UAAIC,IAAS,gCACTT,IAAQS,EAAO,KAAKD,EAAQ,QAAQ,SAAS,EAAE,CAAC;AACpD,aAAO,CAACR,EAAM,CAAC,GAAGA,EAAM,CAAC,KAAK,QAAWA,EAAM,CAAC,KAAK,MAAS;IAClE,GATiB,mCAAA,GAWjB,aAAavB,EAAA,SAAuC8B,GAAO;AACvD,UAAIG,IAAWH,EAAM,MAAM,MAAM;CAAI,EAAE,OAAO,SAASI,GAAM;AACzD,eAAO,CAAC,CAACA,EAAK,MAAMN,CAAsB;MAC9C,GAAG,IAAI;AAEP,aAAOK,EAAS,IAAI,SAASC,GAAM;AAC3BA,UAAK,QAAQ,QAAQ,IAAI,OAEzBA,IAAOA,EAAK,QAAQ,cAAc,MAAM,EAAE,QAAQ,8BAA8B,EAAE;AAEtF,YAAIC,IAAgBD,EAAK,QAAQ,QAAQ,EAAE,EAAE,QAAQ,gBAAgB,GAAG,EAAE,QAAQ,WAAW,EAAE,GAI3FE,IAAWD,EAAc,MAAM,YAAY;AAG/CA,YAAgBC,IAAWD,EAAc,QAAQC,EAAS,CAAC,GAAG,EAAE,IAAID;AAIpE,YAAIE,IAAgB,KAAK,gBAAgBD,IAAWA,EAAS,CAAC,IAAID,CAAa,GAC3EjB,IAAekB,KAAYD,KAAiB,QAC5CpB,IAAW,CAAC,QAAQ,aAAa,EAAE,QAAQsB,EAAc,CAAC,CAAC,IAAI,KAAK,SAAYA,EAAc,CAAC;AAEnG,eAAO,IAAI1B,EAAW,EAClB,cAAcO,GACd,UAAUH,GACV,YAAYsB,EAAc,CAAC,GAC3B,cAAcA,EAAc,CAAC,GAC7B,QAAQH,EACZ,CAAC;MACL,GAAG,IAAI;IACX,GAjCa,+BAAA,GAmCb,iBAAiBlC,EAAA,SAA2C8B,GAAO;AAC/D,UAAIG,IAAWH,EAAM,MAAM,MAAM;CAAI,EAAE,OAAO,SAASI,GAAM;AACzD,eAAO,CAACA,EAAK,MAAML,CAAyB;MAChD,GAAG,IAAI;AAEP,aAAOI,EAAS,IAAI,SAASC,GAAM;AAM/B,YAJIA,EAAK,QAAQ,SAAS,IAAI,OAC1BA,IAAOA,EAAK,QAAQ,oDAAoD,KAAK,IAG7EA,EAAK,QAAQ,GAAG,MAAM,MAAMA,EAAK,QAAQ,GAAG,MAAM;AAElD,iBAAO,IAAIvB,EAAW,EAClB,cAAcuB,EAClB,CAAC;AAED,YAAII,IAAoB,8BACpBC,IAAUL,EAAK,MAAMI,CAAiB,GACtCpB,IAAeqB,KAAWA,EAAQ,CAAC,IAAIA,EAAQ,CAAC,IAAI,QACpDF,IAAgB,KAAK,gBAAgBH,EAAK,QAAQI,GAAmB,EAAE,CAAC;AAE5E,eAAO,IAAI3B,EAAW,EAClB,cAAcO,GACd,UAAUmB,EAAc,CAAC,GACzB,YAAYA,EAAc,CAAC,GAC3B,cAAcA,EAAc,CAAC,GAC7B,QAAQH,EACZ,CAAC;MAET,GAAG,IAAI;IACX,GA/BiB,mCAAA,GAiCjB,YAAYlC,EAAA,SAAsCwC,GAAG;AACjD,aAAI,CAACA,EAAE,cAAeA,EAAE,QAAQ,QAAQ;CAAI,IAAI,MAC5CA,EAAE,QAAQ,MAAM;CAAI,EAAE,SAASA,EAAE,WAAW,MAAM;CAAI,EAAE,SACjD,KAAK,YAAYA,CAAC,IACjBA,EAAE,QAGH,KAAK,aAAaA,CAAC,IAFnB,KAAK,aAAaA,CAAC;IAIlC,GATY,8BAAA,GAWZ,aAAaxC,EAAA,SAAuCwC,GAAG;AAKnD,eAJIC,IAAS,qCACTC,IAAQF,EAAE,QAAQ,MAAM;CAAI,GAC5BG,IAAS,CAAC,GAEL9B,IAAI,GAAG+B,IAAMF,EAAM,QAAQ7B,IAAI+B,GAAK/B,KAAK,GAAG;AACjD,YAAIgC,IAAQJ,EAAO,KAAKC,EAAM7B,CAAC,CAAC;AAC5BgC,aACAF,EAAO,KAAK,IAAIhC,EAAW,EACvB,UAAUkC,EAAM,CAAC,GACjB,YAAYA,EAAM,CAAC,GACnB,QAAQH,EAAM7B,CAAC,EACnB,CAAC,CAAC;MAAA;AAIV,aAAO8B;IACX,GAjBa,+BAAA,GAmBb,cAAc3C,EAAA,SAAwCwC,GAAG;AAKrD,eAJIC,IAAS,8DACTC,IAAQF,EAAE,WAAW,MAAM;CAAI,GAC/BG,IAAS,CAAC,GAEL9B,IAAI,GAAG+B,IAAMF,EAAM,QAAQ7B,IAAI+B,GAAK/B,KAAK,GAAG;AACjD,YAAIgC,IAAQJ,EAAO,KAAKC,EAAM7B,CAAC,CAAC;AAC5BgC,aACAF,EAAO,KACH,IAAIhC,EAAW,EACX,cAAckC,EAAM,CAAC,KAAK,QAC1B,UAAUA,EAAM,CAAC,GACjB,YAAYA,EAAM,CAAC,GACnB,QAAQH,EAAM7B,CAAC,EACnB,CAAC,CACL;MAAA;AAIR,aAAO8B;IACX,GApBc,gCAAA,GAuBd,cAAc3C,EAAA,SAAwC8B,GAAO;AACzD,UAAIG,IAAWH,EAAM,MAAM,MAAM;CAAI,EAAE,OAAO,SAASI,GAAM;AACzD,eAAO,CAAC,CAACA,EAAK,MAAMP,CAA2B,KAAK,CAACO,EAAK,MAAM,mBAAmB;MACvF,GAAG,IAAI;AAEP,aAAOD,EAAS,IAAI,SAASC,GAAM;AAC/B,YAAIY,IAASZ,EAAK,MAAM,GAAG,GACvBG,IAAgB,KAAK,gBAAgBS,EAAO,IAAI,CAAC,GACjDC,IAAgBD,EAAO,MAAM,KAAK,IAClC5B,IAAe6B,EACd,QAAQ,kCAAkC,IAAI,EAC9C,QAAQ,cAAc,EAAE,KAAK,QAC9BC;AACAD,UAAa,MAAM,aAAa,MAChCC,IAAUD,EAAa,QAAQ,sBAAsB,IAAI;AAE7D,YAAI1B,IAAQ2B,MAAY,UAAaA,MAAY,8BAC7C,SAAYA,EAAQ,MAAM,GAAG;AAEjC,eAAO,IAAIrC,EAAW,EAClB,cAAcO,GACd,MAAMG,GACN,UAAUgB,EAAc,CAAC,GACzB,YAAYA,EAAc,CAAC,GAC3B,cAAcA,EAAc,CAAC,GAC7B,QAAQH,EACZ,CAAC;MACL,GAAG,IAAI;IACX,GA5Bc,gCAAA,EA6BlB;EACJ,GA7LQ,kBAAA,CA6LP;AAAA,CAAA;ACzMD,IAAAe,IAA6B,GAAA,EAAA,CAAA;ACGtB,IAAMC,IACX,OAAO,WAAY,YACnB,OAAO,QAAQ,YAAa,YAC5B,OAAO,QAAQ,SAAS,QAAS,YACjC,OAAO,QAAQ,UACb;AALG,IAQMC,IACXD,KACA,OAAO,SAAW,OAClB,OAAO,OAAO,UAAY,OAC1B,OAAOE,IAAY,OACnB,OAAO,YAAc;AAbhB,IAgBMC,IAAcH,KAAW,CAACC;AAhBhC,IAmBMG,KAAU,OAAO,OAAS;AAnBhC,IAsBMC,IAAa,CAACL,KAAW,CAACI;AAtBhC,IAyBME,IACXD,KACA,OAAO,UAAW,YAClB,OAAO,YAAa,YACpB,OAAO,SAAS,iBAAkB,cAClC,OAAO,kBAAmB,YAC1B,OAAO,iBAAkB;AA/BpB,IAkCME,IACXF,KAAc,OAAO,iBAAkB,cAAc,OAAO,QAAS;AAnChE,IAsCMG,KACX,OAAO,aAAc,YACrB,OAAO,UAAU,aAAc,YAC/B,UAAU,UAAU,QAAQ,QAAQ,KAAK,MACzC,UAAU,UAAU,QAAQ,QAAQ,IAAI;ADnC1C,IAAIC;AAAJ,IACIC;AADJ,IAEIC;AAFJ,IAIWC;AAJX,IAMWC;AAaX,eAAsBC,IAAkB;AAmBtC,MAlBI,CAACd,MAILS,KAAc,MAAM,OAAO,wBAAU,GAAG,SACxCG,IAAY,MAAM,OAAO,uBAAS,GAClCC,IAAoB,MAAM,OAAO,wBAAkB,GAGnDF,KAAa,MAAM,OAAO,uBAAS,GAAG,SACtCD,IAAW,MAAM,OAAO,yBAAW,GACnCK,IAAUL,EAAS,KAOf,OAAOR,IAAY;AACrB;AAKF,MAAMc,IAAKJ,GACLK,IAAS,MAAM,OAAO,2BAAa,GACnCC,IAAK,MAAM,OAAO,kBAAI,GACtBC,IAAgB,MAAM,OAAO,kCAAoB,GACjDC,IAAwC,EAC5C,IAAAJ,GACA,QAAAC,GACA,IAAAC,GACA,eAAAC,EACF;AAGC,aAAmB,UAAU,SAAUE,GAAkB;AACxD,WAAOD,EAAaC,CAAG;EACzB;AACF;AAxCsBvE,EAAAgE,GAAA,iBAAA;AA0CtB,SAASQ,GAAiBC,GAAcC,GAAuB;AAC7D,SAAOd,EAAS,QAAQc,KAAQ,KAAKD,CAAI;AAC3C;AAFSzE,EAAAwE,IAAA,kBAAA;AAIT,SAASG,GAAoBF,GAAcC,GAAuB;AAChE,SAAIA,MAAS,WAEXA,IAAO,WAEF,IAAI,IAAID,GAAMC,CAAI,EAAE,SAAS;AACtC;AANS1E,EAAA2E,IAAA,qBAAA;AAQF,IAAIC;AACP1B,IACF0B,IAAcJ,KAEdI,IAAcD;AAQT,IAAIV;AAENf,MACHe,IAAU;AAYZ,SAASY,GACPJ,GACAK,GAGkC;AAKlC,SAJIL,EAAK,WAAW,SAAS,MAE3BA,IAAOA,EAAK,MAAM,CAAgB,IAEhCA,EAAK,SAAS,KAAK,IAEd,EAAE,UAAU,MAAMA,CAAI,EAAE,IAGxB,EACL,QAAQV,EACL,SAASU,CAAI,EACb,KACEM,OACC,IAAI,WAAWA,EAAK,QAAQA,EAAK,YAAYA,EAAK,UAAU,CAChE,EACJ;AAEJ;AAxBS/E,EAAA6E,IAAA,wBAAA;AAmCT,SAASG,GACPP,GACAQ,GACqD;AACrD,MAAMC,IAAM,IAAI,IAAIT,GAAM,QAA0B;AAEpD,SAAO,EAAE,UAAU,MAAMS,GADXD,IAAkB,EAAE,WAAWA,EAAgB,IAAI,CAAC,CAC7B,EAAE;AACzC;AAPSjF,EAAAgF,IAAA,2BAAA;AAUF,IAAIG;AAMPjC,IACFiC,IAAoBN,KAEpBM,IAAoBH;AAGtB,eAAsBI,EACpBX,GACAY,GACqB;AACrB,MAAM,EAAE,UAAAC,GAAU,QAAAC,EAAO,IAAIJ,EAAkBV,GAAMY,CAAsB;AAC3E,MAAIE;AACF,WAAOA;AAET,MAAMC,IAAI,MAAMF;AAChB,MAAI,CAACE,EAAE;AACL,UAAM,IAAI,MAAM,mBAAmBf,CAAAA,oBAAwB;AAE7D,SAAO,IAAI,WAAW,MAAMe,EAAE,YAAY,CAAC;AAC7C;AAbsBxF,EAAAoF,GAAA,gBAAA;AAqBf,IAAIK;AAEX,IAAIjC;AAEFiC,MAAazF,EAAA,OAAOkF,MAAQ,MAAM,OAAiCA,IAAtD,YAAA;SACJzB;AAETgC,MAAazF,EAAA,OAAOkF,MAAQ;AAC1B,QAAI;AAEF,iBAAW,cAAcA,CAAG;IAC9B,SAAS,GAAP;AAEA,UAAI,aAAa;AACf,cAAM,OAAiCA;;AAEvC,cAAM;IAEV;EACF,GAZa,YAAA;SAaJhC;AACTuC,MAAaC;;AAEb,QAAM,IAAI,MAAM,sCAAsC;AAQxD,eAAeA,GAAeR,GAAa;AACrCA,IAAI,WAAW,SAAS,MAE1BA,IAAMA,EAAI,MAAM,CAAgB,IAE9BA,EAAI,SAAS,KAAK,IAEpBrB,EAAU,iBAAiB,OAAO,MAAM,MAAMqB,CAAG,GAAG,KAAK,CAAC,IAI1D,MAAM,OAAiCvB,EAAW,cAAcuB,CAAG,EAAE;AAEzE;AAbelF,EAAA0F,IAAA,gBAAA;AAef,eAAsBC,EAAaC,GAAwC;AACzE,MAAI1C,GAAS;AACX,UAAMc,EAAgB;AACtB,QAAM6B,IAAiB,MAAM9B,EAAkB,SAAS6B,GAAa,EACnE,UAAU,OACZ,CAAC;AACD,WAAO,KAAK,MAAMC,CAAc;EAAA;AAGhC,WAAO,OADQ,MAAM,MAAMD,CAAW,GAChB,KAAK;AAE/B;AAXsB5F,EAAA2F,GAAA,cAAA;AAiBtB,eAAsBG,IAAoC;AACxD,MAAI3C;AACF,WAAO;AAGT,MAAI4C;AACJ,MAAI;AACF,UAAM,IAAI;EACZ,SAASvD,GAAP;AACAuD,QAAMvD;EACR;AACA,MAAIzB,IAAW,EAAAiF,QAAiB,MAAMD,CAAG,EAAE,CAAC,EAAE;AAE9C,MAAI1C,GAAa;AACf,QAAMO,IAAW,MAAM,OAAO,yBAAW;AAKzC,YAJgB,MAAM,OAAO,wBAAU,GAIxB,cAAcA,EAAS,QAAQ7C,CAAQ,CAAC;EAAA;AAGzD,MAAMkF,IAAmBlF,EAAS,YAAYkD,CAAO;AACrD,MAAIgC,MAAqB;AACvB,UAAM,IAAI,MACR,8DACF;AAEF,SAAOlF,EAAS,MAAM,GAAGkF,CAAgB;AAC3C;AA7BsBjG,EAAA8F,GAAA,kBAAA;AEtPf,SAASI,EAAmBvG,GAAgB;AACjD,MAAMwG,IAAKxG,EAAO,IACZyG,IAAQzG,EAAO,GAAG,YAAY,OAC9B0G,IAAO1G,EAAO,MAEd2G,IAAgB,EAGpB,UAAU,OACV,WAAW,OACX,OAAO,SAAUC,GAAY;AAC3B,QAAI,CAACA,EAAM,KAAK;AACd,YAAM,IAAI,MAAM,mCAAmC;AAIrD,WAAOH,EAAM,MAAM,MAAM,MAAM,SAAS;EAC1C,GACA,QAAQ,OAAOG,GAAYC,GAAmBC,MAAuB;AACnE,QAAI;AACF,UAAMC,IAAQJ,EAAc,YAAYC,CAAK,GACvCI,IAAS,MAAML,EAAc,aAAaC,CAAK,GAC/CK,IAAMJ,IAAWG,IAASD,GAC1BG,IAAML,IAAWE,IAAQC;AAC/B,YAAML,EAAc,UAAUC,GAAOK,GAAKC,CAAG,GAC7CJ,EAAS,IAAI;IACf,SAASjE,GAAP;AACAiE,QAASjE,CAAC;IACZ;EACF,GAEA,aAAc+D,OAAe;AAC3B,QAAIO,IAAU,uBAAO,OAAO,IAAI;AAEhC,aAASC,EAAU3G,GAAW;AAC5B,aAAOA,MAAM,OAAOA,MAAM;IAC5B;AAFSJ,MAAA+G,GAAA,WAAA;AAIT,aAASC,EAAWpH,GAAc;AAChC,aAAQQ,OACCiG,EAAK,MAAMzG,GAAMQ,CAAC;IAE7B;AAJSJ,MAAAgH,GAAA,YAAA;AAMT,QAAIC,IAAQd,EAAG,QAAQI,EAAM,UAAU,EACpC,OAAOQ,CAAS,EAChB,IAAIC,EAAWT,EAAM,UAAU,CAAC;AAEnC,WAAOU,EAAM,UAAQ;AACnB,UAAIxC,IAAOwC,EAAM,IAAI,GACjBC,IAAOf,EAAG,KAAK1B,CAAI;AAEnB0B,QAAG,MAAMe,EAAK,IAAI,KACpBD,EAAM,KAAK,MACTA,GACAd,EAAG,QAAQ1B,CAAI,EAAE,OAAOsC,CAAS,EAAE,IAAIC,EAAWvC,CAAI,CAAC,CACzD,GAGFqC,EAAQrC,CAAI,IAAI,EAAE,WAAWyC,EAAK,OAAO,MAAMA,EAAK,KAAK;IAAA;AAG3D,WAAO,EAAE,MAAM,SAAS,SAASJ,EAAQ;EAC3C,GAEA,cAAc,OAAOP,MAAe;AAElC,QAAMO,IAAU,uBAAO,OAAO,IAAI,GAE5BK,IAAU,MAAMC,GAAab,EAAM,KAAK,gBAAgB;AAC9D,aAAW,CAAC9B,GAAM4C,CAAM,KAAKF;AACvB1C,YAAS,QAEbqC,EAAQT,EAAK,MAAME,EAAM,YAAY9B,CAAI,CAAC,IAAI,EAC5C,WACE4C,EAAO,SAAS,UACX,MAAMA,EAAO,QAAQ,GAAG,mBACzB,oBAAI,QACV,MACEA,EAAO,SAAS,SACZf,EAAc,YACdA,EAAc,SACtB;AAGF,WAAO,EAAE,MAAM,UAAU,SAAAQ,GAAS,SAAAK,EAAQ;EAC5C,GACA,gBAAiB1C,OAAiB;AAEhC,QAAM6C,IADSnB,EAAG,WAAW1B,CAAI,EACb,MACdyC,IAAOf,EAAG,KAAK1B,CAAI;AAEzB,QAAI0B,EAAG,MAAMe,EAAK,IAAI;AACpB,aAAO,EAAE,WAAWA,EAAK,OAAO,MAAMA,EAAK,KAAK;AAC3C,QAAIf,EAAG,OAAOe,EAAK,IAAI;AAC5B,aAAAI,EAAK,WAAWlB,EAAM,wBAAwBkB,CAAI,GAC3C,EACL,WAAWJ,EAAK,OAChB,MAAMA,EAAK,MACX,UAAUI,EAAK,SACjB;AAEA,UAAM,IAAI,MAAM,yBAAyB;EAE7C,GACA,iBAAiB,CAAC7C,GAAc8C,MAAe;AAC7C,QAAIpB,EAAG,MAAMoB,EAAM,IAAO;AACxBpB,QAAG,UAAU1B,GAAM8C,EAAM,IAAO;aACvBpB,EAAG,OAAOoB,EAAM,IAAO;AAChCpB,QAAG,UAAU1B,GAAM8C,EAAM,UAAa,EAAE,QAAQ,KAAK,CAAC;;AAEtD,YAAM,IAAI,MAAM,yBAAyB;AAG3CpB,MAAG,MAAM1B,GAAM8C,EAAM,IAAO,GAC5BpB,EAAG,MAAM1B,GAAM8C,EAAM,WAAcA,EAAM,SAAY;EACvD,GACA,kBAAmB9C,OAAiB;AAClC,QAAIyC,IAAOf,EAAG,KAAK1B,CAAI;AAEnB0B,MAAG,MAAMe,EAAK,IAAI,IACpBf,EAAG,MAAM1B,CAAI,IACJ0B,EAAG,OAAOe,EAAK,IAAI,KAC5Bf,EAAG,OAAO1B,CAAI;EAElB,GACA,iBAAiB,OAAO4C,MAAgB;AACtC,QAAIA,EAAO,SAAS,QAAQ;AAC1B,UAAMG,IAAO,MAAMH,EAAO,QAAQ;AAClC,aAAO,EACL,UAAU,IAAI,WAAW,MAAMG,EAAK,YAAY,CAAC,GACjD,MAAMlB,EAAc,WACpB,WAAWkB,EAAK,iBAClB;IAAA,OACK;AAAA,UAAIH,EAAO,SAAS;AACzB,eAAO,EACL,MAAMf,EAAc,UACpB,WAAW,oBAAI,OACjB;AAEA,YAAM,IAAI,MAAM,mBAAmBe,EAAO,IAAI;IAAA;EAElD,GACA,kBAAkB,OAAOF,GAAc1C,GAAc8C,MAAe;AAClE,QAAME,IAAkBN,EAAQ,IAAId,EAAK,QAAQ5B,CAAI,CAAC,GAChD4C,IAASlB,EAAG,OAAOoB,EAAM,IAAI,IAC/B,MAAME,EAAgB,cAAcpB,EAAK,SAAS5B,CAAI,GAAG,EACvD,QAAQ,KACV,CAAC,IACD,MAAMgD,EAAgB,mBAAmBpB,EAAK,SAAS5B,CAAI,GAAG,EAC5D,QAAQ,KACV,CAAC;AACL,QAAI4C,EAAO,SAAS,QAAQ;AAC1B,UAAMK,IAAW,MAAML,EAAO,eAAe;AAC7C,YAAMK,EAAS,MAAMH,EAAM,QAAQ,GACnC,MAAMG,EAAS,MAAM;IAAA;AAEvBP,MAAQ,IAAI1C,GAAM4C,CAAM;EAC1B,GACA,mBAAmB,OAAOF,GAAc1C,MAAiB;AAEvD,UADwB0C,EAAQ,IAAId,EAAK,QAAQ5B,CAAI,CAAC,EAChC,YAAY4B,EAAK,SAAS5B,CAAI,CAAC,GACrD0C,EAAQ,OAAO1C,CAAI;EACrB,GACA,WAAW,OAAO8B,GAAYK,GAAUC,MAAa;AACnD,QAAIc,IAAQ,GAENC,IAAwB,CAAC;AAC/B,WAAO,KAAKhB,EAAI,OAAO,EAAE,QAAQ,SAAUiB,GAAK;AAC9C,UAAMrF,IAAIoE,EAAI,QAAQiB,CAAG,GACnBC,IAAKjB,EAAI,QAAQgB,CAAG;AAAA,OAExB,CAACC,KACA3B,EAAG,OAAO3D,EAAE,IAAI,KACfA,EAAE,UAAa,QAAQ,IAAIsF,EAAG,UAAa,QAAQ,OAErDF,EAAO,KAAKC,CAAG,GACfF;IAEJ,CAAC,GAGDC,EAAO,KAAK;AAEZ,QAAMG,IAAwB,CAAC;AAW/B,QAVA,OAAO,KAAKlB,EAAI,OAAO,EAAE,QAAQ,SAAUgB,GAAK;AACzCjB,QAAI,QAAQiB,CAAG,MAClBE,EAAO,KAAKF,CAAG,GACfF;IAEJ,CAAC,GAGDI,EAAO,KAAK,EAAE,QAAQ,GAElB,CAACJ;AACH;AAGF,QAAMR,IAAUP,EAAI,SAAS,WAAWA,EAAI,UAAUC,EAAI;AAE1D,aAAWpC,KAAQmD,GAAQ;AACzB,UAAMI,IAAU3B,EAAK,UACnB5B,EAAK,QAAQ8B,EAAM,YAAY,GAAG,CACpC,EAAE,UAAU,CAAC;AACb,UAAIM,EAAI,SAAS,SAAS;AACxB,YAAMQ,IAASF,EAAQ,IAAIa,CAAO,GAC5BT,IAAQ,MAAMjB,EAAc,gBAAgBe,CAAM;AACxDf,UAAc,gBAAgB7B,GAAM8C,CAAK;MAAA,OACpC;AACL,YAAMA,IAAQjB,EAAc,eAAe7B,CAAI;AAC/C,cAAM6B,EAAc,iBAAiBa,GAASa,GAAST,CAAK;MAAA;IAAA;AAIhE,aAAW9C,KAAQsD;AACjB,UAAIlB,EAAI,SAAS;AACfP,UAAc,iBAAiB7B,CAAI;WAC9B;AACL,YAAMuD,IAAU3B,EAAK,UACnB5B,EAAK,QAAQ8B,EAAM,YAAY,GAAG,CACpC,EAAE,UAAU,CAAC;AACb,cAAMD,EAAc,kBAAkBa,GAASa,CAAO;MAAA;EAG5D,EACF;AAEArI,IAAO,GAAG,YAAY,iBAAiB2G;AACzC;AArOgBtG,EAAAkG,GAAA,oBAAA;AAuOhB,IAAMkB,KAAepH,EAAA,OAAOiI,MAAmB;AAC7C,MAAMd,IAAe,CAAC;AAEtB,iBAAee,EAAQC,GAAmB;AACxC,mBAAiBZ,KAASY,EAAa,OAAO;AAC5ChB,QAAQ,KAAKI,CAAK,GACdA,EAAM,SAAS,eACjB,MAAMW,EAAQX,CAAK;EAGzB;AAPevH,IAAAkI,GAAA,SAAA,GASf,MAAMA,EAAQD,CAAS;AAEvB,MAAMtF,IAAS,oBAAI;AACnBA,IAAO,IAAI,KAAKsF,CAAS;AACzB,WAAWZ,KAAUF,GAAS;AAC5B,QAAMiB,KAAgB,MAAMH,EAAU,QAAQZ,CAAM,GAAG,KAAK,GAAG;AAC/D1E,MAAO,IAAIyF,GAAcf,CAAM;EAAA;AAEjC,SAAO1E;AACT,GArBqB,cAAA;ACpMd,SAAS0F,EAAeC,GAAwC;AACrE,MAAMC,IAA+B,EACnC,iBAAiB,MACjB,iBAAiB,MACjB,gBAAgB,OAChB,QAAQC,GAAiCF,CAAM,GAC/C,KAAKG,GAAgBC,GAAgB;AAGnC,UAAAH,EAAS,SAAS,EAAE,QAAAE,GAAQ,SAAAC,EAAQ,GAC9BA;EACR,GACA,OAAOJ,EAAO,QACd,UAAUA,EAAO,QACjB,WAAWA,EAAO,MAClB,KAAK,EAAE,QAAAA,EAAO,GAYd,YAAa7D,OAAiB6D,EAAO,WAAW7D,GAChD,iBAAiBkE,GAAuBL,EAAO,QAAQ,EACzD;AACA,SAAOC;AACT;AA/BgBvI,EAAAqI,GAAA,gBAAA;AAyChB,SAASO,GAAoBnE,GAA0B;AACrD,SAAO,SAAUoE,GAAQ;AACvB,QAAMC,IAAe;AACrB,QAAI;AACFD,QAAO,GAAG,UAAUpE,CAAI;IAC1B,SAASjC,GAAP;AACA,cAAQ,MAAM,iDAAiDiC,CAAAA,IAAQ,GACvE,QAAQ,MAAMjC,CAAC,GACf,QAAQ,MAAM,UAAUsG,CAAAA,gCAA4C,GACpErE,IAAOqE;IACT;AACAD,MAAO,GAAG,MAAMpE,CAAI;EACtB;AACF;AAbSzE,EAAA4I,IAAA,qBAAA;AAeT,SAASG,GAAeC,GAA4C;AAClE,SAAO,SAAUH,GAAQ;AACvB,WAAO,OAAOA,EAAO,KAAKG,CAAG;EAC/B;AACF;AAJShJ,EAAA+I,IAAA,gBAAA;AAUT,SAASE,GAAsBC,GAA8B;AAC3D,SAAQL,OAAW;AACjB,aAAWtC,KAAS2C;AAClBL,QAAO,GAAG,UAAUtC,CAAK,GACzBsC,EAAO,GAAG,MAAMA,EAAO,GAAG,YAAY,QAAQ,EAAE,MAAMtC,EAAM,GAAGA,CAAK;EAExE;AACF;AAPSvG,EAAAiJ,IAAA,uBAAA;AAsBT,SAASE,GAAcC,GAA+B;AACpD,MAAMC,IAAqCjE,EAAegE,CAAS;AACnE,SAAQP,OAAW;AAEjB,QAAMS,IAAUT,EAAO,kBAAkB,GAEnCU,IAAUV,EAAO,kBAAkB;AAEzCA,MAAO,GAAG,UAAU,MAAM,GAC1BA,EAAO,GAAG,UAAU,cAAcS,CAAAA,IAAWC,CAAAA,gBAAuB,GAEpEV,EAAO,iBAAiB,gBAAgB,GAExCQ,EACG,KAAMG,OAAuB;AAC5BX,QAAO,GAAG,UAAU,cAAcS,CAAAA,GAAUC,CAAAA,QAAeC,CAAM;IACnE,CAAC,EACA,MAAOhH,OAAM;AACZ,cAAQ,MAAM,uDAAuD,GACrE,QAAQ,MAAMA,CAAC;IACjB,CAAC,EACA,QAAQ,MAAM;AACbqG,QAAO,oBAAoB,gBAAgB;IAC7C,CAAC;EACL;AACF;AAzBS7I,EAAAmJ,IAAA,eAAA;AA+BT,SAASX,GAAiCF,GAAkC;AAC1E,MAAImB;AACJ,SAAInB,EAAO,aAAa,OACtBmB,IAAYnB,EAAO,YAEnBmB,IAAYnB,EAAO,WAAW,qBAGzB,CACLa,GAAcM,CAAS,GACvBb,GAAoBN,EAAO,IAAI,IAAI,GACnCS,GAAeT,EAAO,GAAG,GACzBW,GAAsBX,EAAO,YAAY,GACzCpC,CACF;AACF;AAfSlG,EAAAwI,IAAA,kCAAA;AAiBT,SAASG,GACPe,GACuC;AAWvC,MAAM,EAAE,QAAAnE,GAAQ,UAAAD,EAAS,IAAIH,EAAkBuE,IAAW,kBAAkB;AAC5E,SAAO,SACLC,GACAC,GAIA;AACA,WAAC,iBAAkB;AACjB,UAAI;AACF,YAAIC;AACAvE,YACFuE,IAAM,MAAM,YAAY,qBAAqBvE,GAAUqE,CAAO,IAE9DE,IAAM,MAAM,YAAY,YAAY,MAAMtE,GAAQoE,CAAO;AAE3D,YAAM,EAAE,UAAAG,GAAU,QAAAnK,EAAO,IAAIkK;AAIzB,eAAO,sBAAwB,QAEjC,sBAAsB,IAAI,oBAAoB,YAAYlK,CAAM,IAElEiK,EAAgBE,GAAUnK,CAAM;MAClC,SAAS6C,GAAP;AACA,gBAAQ,KAAK,4BAA4B,GACzC,QAAQ,KAAKA,CAAC;MAChB;IACF,EAAG,GAEI,CAAC;EACV;AACF;AA9CSxC,EAAA2I,IAAA,wBAAA;ACxKF,IAAMoB,IAAkB;ACwD/B,eAAsBC,GACpBC,IAmHI,CAAC,GACsB;AAC3B,QAAMjG,EAAgB;AACtB,MAAI0F,IAAWO,EAAQ,YAAa,MAAMnE,EAAiB;AAC3D4D,MAAW9E,EAAY8E,CAAQ,GAC1BA,EAAS,SAAS,GAAG,MACxBA,KAAY,MAEdO,EAAQ,WAAWP;AAEnB,MAAMQ,IAAiB,EACrB,YAAY,OACZ,WAAW,YACX,OAAO,WAAW,SAAS,WAAW,SAAS,QAC/C,aAAaR,IAAW,qBACxB,MAAM,CAAC,GACP,cAAc,CAAC,GACf,KAAK,CAAC,GACN,iBAAiBA,GACjB,UAAU,CAAC,EACb,GACMpB,IAAS,OAAO,OAAO4B,GAAgBD,CAAO;AAC/C3B,IAAO,IAAI,SACdA,EAAO,IAAI,OAAO;AAEpB,MAAM6B,IAAqB9B,EAAeC,CAAM,GAC1C8B,IAAMD,EAAmB;AAM/B,MALAC,EAAI,kBAAkBzE,EAAa2C,EAAO,WAAW,GAKjD,OAAO,wBAAyB,YAAY;AAC9C,QAAM+B,IAAY,GAAG/B,EAAO,QAAA;AAC5B,UAAM7C,EAAW4E,CAAS;EAAA;AAG5B,MAAIC;AACJ,MAAIL,EAAQ,eAAe;AACzB,QAAMM,IAAM,MAAMN,EAAQ;AACtB,gBAAY,OAAOM,CAAG,IACxBD,IAAWC,IAEXD,IAAW,IAAI,WAAWC,CAAG,GAE/BJ,EAAmB,eAAe,MAElCA,EAAmB,iBAAiBG,EAAS;EAAA;AAK/C,MAAMzB,IAAS,MAAM,qBAAqBsB,CAAkB;AAE5D,MAAIA,EAAmB;AACrB,UAAMA,EAAmB,OAAO;AAMlC,MAJIF,EAAQ,uBACVG,EAAI,yBAAyB,IAAI,GAG/BA,EAAI,YAAYL;AAClB,UAAM,IAAI,MACR,oCAC6BA,CAAAA,WAAkBK,EAAI,OAAA,mHAGrD;AAGFvB,IAAO,aAAcpE,OAAiB;AACpC,UAAM,IAAI,MAAM,qDAAqD;EACvE;AAEA,MAAI+F;AACAF,QACFE,IAAiBJ,EAAI,gBAAgBE,CAAQ;AAG/C,MAAMG,IAAUL,EAAI,kBAAkBI,CAAc;AACpD,SAAAJ,EAAI,IAAI,KAAK,OAAO,GAAGA,EAAI,OAAO,IAAI,IAAI,GAErCK,EAAQ,QAAQ,SAAS,KAAK,KAGjCL,EAAI,UAAU,qCAAqCK,EAAQ,OAAA,QAAe,GAE5EL,EAAI,SAAS,eAAe,GAC5B,MAAMA,EAAI,mBAGVA,EAAI,kBAAkB9B,EAAO,OAAOA,EAAO,QAAQA,EAAO,MAAM,GACzDmC;AACT;AAjNsBzK,EAAAgK,IAAA,aAAA;",
  "names": ["require_stackframe", "__commonJSMin", "exports", "module", "root", "factory", "_isNumber", "n", "__name", "_capitalize", "str", "_getter", "p", "booleanProps", "numericProps", "stringProps", "arrayProps", "objectProps", "props", "StackFrame", "obj", "i", "v", "fileName", "lineNumber", "columnNumber", "functionName", "argsStartIndex", "argsEndIndex", "args", "locationString", "parts", "j", "k", "require_error_stack_parser", "FIREFOX_SAFARI_STACK_REGEXP", "CHROME_IE_STACK_REGEXP", "SAFARI_NATIVE_CODE_REGEXP", "error", "urlLike", "regExp", "filtered", "line", "sanitizedLine", "location", "locationParts", "functionNameRegex", "matches", "e", "lineRE", "lines", "result", "len", "match", "tokens", "functionCall", "argsRaw", "import_error_stack_parser", "IN_NODE", "IN_NODE_COMMONJS", "__require", "IN_NODE_ESM", "IN_DENO", "IN_BROWSER", "IN_BROWSER_MAIN_THREAD", "IN_BROWSER_WEB_WORKER", "IN_SAFARI", "nodeUrlMod", "nodePath", "nodeVmMod", "nodeFSMod", "nodeFsPromisesMod", "initNodeModules", "pathSep", "fs", "crypto", "ws", "child_process", "node_modules", "mod", "node_resolvePath", "path", "base", "browser_resolvePath", "resolvePath", "node_getBinaryResponse", "_file_sub_resource_hash", "data", "browser_getBinaryResponse", "subResourceHash", "url", "getBinaryResponse", "loadBinaryFile", "file_sub_resource_hash", "response", "binary", "r", "loadScript", "nodeLoadScript", "loadLockFile", "lockFileURL", "package_string", "calculateDirname", "err", "ErrorStackParser", "indexOfLastSlash", "initializeNativeFS", "FS", "MEMFS", "PATH", "nativeFSAsync", "mount", "populate", "callback", "local", "remote", "src", "dst", "entries", "isRealDir", "toAbsolute", "check", "stat", "handles", "getFsHandles", "handle", "node", "entry", "file", "parentDirHandle", "writable", "total", "create", "key", "e2", "remove", "relPath", "dirHandle", "collect", "curDirHandle", "relativePath", "createSettings", "config", "settings", "getFileSystemInitializationFuncs", "status", "toThrow", "getInstantiateWasmFunc", "createHomeDirectory", "Module", "fallbackPath", "setEnvironment", "env", "mountLocalDirectories", "mounts", "installStdlib", "stdlibURL", "stdlibPromise", "pymajor", "pyminor", "stdlib", "stdLibURL", "indexURL", "imports", "successCallback", "res", "instance", "version", "loadPyodide", "options", "default_config", "emscriptenSettings", "API", "scriptSrc", "snapshot", "snp", "snapshotConfig", "pyodide"]
}
